--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix IV" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=53 LPM_WIDTHB=53 LPM_WIDTHP=106 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION soft (in)
RETURNS ( out);
FUNCTION stratixiv_mac_mult (aclr[3..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], ena[3..0], signa, signb)
WITH ( dataa_clear, dataa_clock, dataa_width, datab_clear, datab_clock, datab_width, scanouta_clear, scanouta_clock, signa_clear, signa_clock, signa_internally_grounded, signb_clear, signb_clock, signb_internally_grounded)
RETURNS ( dataout[dataa_width+datab_width-1..0], scanouta[dataa_width-1..0]);
FUNCTION stratixiv_mac_out (aclr[3..0], chainin[chainin_width-1..0], clk[3..0], dataa[dataa_width-1..0], datab[datab_width-1..0], datac[datac_width-1..0], datad[datad_width-1..0], ena[3..0], rotate, round, roundchainout, saturate, saturatechainout, shiftright, signa, signb, zeroacc, zerochainout, zeroloopback)
WITH ( acc_adder_operation, chainin_width = 1, dataa_width = 1, datab_width = 1, datac_width = 1, datad_width = 1, dataout_width = 72, first_adder0_clear, first_adder0_clock, first_adder0_mode, first_adder1_clear, first_adder1_clock, first_adder1_mode, multa_signa_internally_grounded, multa_signb_internally_grounded, multb_signa_internally_grounded, multb_signb_internally_grounded, multc_signa_internally_grounded, multc_signb_internally_grounded, multd_signa_internally_grounded, multd_signb_internally_grounded, operation_mode, output_clear, output_clock, rotate_clear, rotate_clock, rotate_output_clear, rotate_output_clock, rotate_pipeline_clear, rotate_pipeline_clock, round_chain_out_mode, round_chain_out_width, round_clear, round_clock, round_mode, round_pipeline_clear, round_pipeline_clock, round_width, roundchainout_clear, roundchainout_clock, roundchainout_output_clear, roundchainout_output_clock, roundchainout_pipeline_clear, roundchainout_pipeline_clock, saturate_chain_out_mode, saturate_chain_out_width, saturate_clear, saturate_clock, saturate_mode, saturate_pipeline_clear, saturate_pipeline_clock, saturate_width, saturatechainout_clear, saturatechainout_clock, saturatechainout_output_clear, saturatechainout_output_clock, saturatechainout_pipeline_clear, saturatechainout_pipeline_clock, second_adder_clear, second_adder_clock, shiftright_clear, shiftright_clock, shiftright_output_clear, shiftright_output_clock, shiftright_pipeline_clear, shiftright_pipeline_clock, signa_clear, signa_clock, signa_pipeline_clear, signa_pipeline_clock, signb_clear, signb_clock, signb_pipeline_clear, signb_pipeline_clock, zeroacc_clear, zeroacc_clock, zeroacc_pipeline_clear, zeroacc_pipeline_clock, zerochainout_output_clear, zerochainout_output_clock, zeroloopback_clear, zeroloopback_clock, zeroloopback_output_clear, zeroloopback_output_clock, zeroloopback_pipeline_clear, zeroloopback_pipeline_clock)
RETURNS ( dataout[dataout_width-1..0], dftout, loopbackout[17..0], overflow, saturatechainoutoverflow);

--synthesis_resources = dsp_18bit 9 lut 218 
SUBDESIGN mult_nbt
( 
	dataa[52..0]	:	input;
	datab[52..0]	:	input;
	result[105..0]	:	output;
) 
VARIABLE
	add13_result[108..0]	:	WIRE;
	sft14a[108..0] : soft;
	sft15a[108..0] : soft;
	sft16a[108..0] : soft;
	sft17a[108..0] : soft;
	mac_mult1 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult2 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult3 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true"
		);
	mac_mult4 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult5 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult6 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_mult7 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signa_internally_grounded = "true",
			signb_internally_grounded = "true"
		);
	mac_mult8 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18,
			signb_internally_grounded = "true"
		);
	mac_mult9 : stratixiv_mac_mult
		WITH (
			dataa_width = 18,
			datab_width = 18
		);
	mac_out10 : stratixiv_mac_out
		WITH (
			dataa_width = 36,
			dataout_width = 72,
			operation_mode = "output_only"
		);
	mac_out11 : stratixiv_mac_out
		WITH (
			dataa_width = 36,
			datab_width = 36,
			datac_width = 36,
			datad_width = 36,
			dataout_width = 72,
			operation_mode = "36_bit_multiply"
		);
	mac_out12 : stratixiv_mac_out
		WITH (
			dataa_width = 36,
			datab_width = 36,
			datac_width = 36,
			datad_width = 36,
			dataout_width = 72,
			operation_mode = "double"
		);
	aclr	: NODE;
	clken	: NODE;
	clock	: NODE;
	w1w[53..0]	: WIRE;
	w2w[53..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out + sft16a[].out;
	sft14a[].in = ( B"0000000000000000000000000000000000000", mac_out11.dataout[71..0]);
	sft15a[].in = ( B"000000000000000000", mac_out12.dataout[54..0], B"000000000000000000000000000000000000");
	sft16a[].in = ( B"0", mac_out10.dataout[35..0], B"000000000000000000000000000000000000000000000000000000000000000000000000");
	sft17a[].in = add13_result[];
	mac_mult1.aclr[] = aclr;
	mac_mult1.clk[] = clock;
	mac_mult1.dataa[17..0] = w1w[35..18];
	mac_mult1.datab[17..0] = w2w[35..18];
	mac_mult1.ena[] = clken;
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult2.aclr[] = aclr;
	mac_mult2.clk[] = clock;
	mac_mult2.dataa[17..0] = w2w[53..36];
	mac_mult2.datab[17..0] = w1w[35..18];
	mac_mult2.ena[] = clken;
	mac_mult2.signa = B"0";
	mac_mult2.signb = B"0";
	mac_mult3.aclr[] = aclr;
	mac_mult3.clk[] = clock;
	mac_mult3.dataa[17..0] = w1w[17..0];
	mac_mult3.datab[17..0] = w2w[35..18];
	mac_mult3.ena[] = clken;
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"0";
	mac_mult4.aclr[] = aclr;
	mac_mult4.clk[] = clock;
	mac_mult4.dataa[17..0] = w2w[53..36];
	mac_mult4.datab[17..0] = w1w[17..0];
	mac_mult4.ena[] = clken;
	mac_mult4.signa = B"0";
	mac_mult4.signb = B"0";
	mac_mult5.aclr[] = aclr;
	mac_mult5.clk[] = clock;
	mac_mult5.dataa[17..0] = w1w[35..18];
	mac_mult5.datab[17..0] = w2w[17..0];
	mac_mult5.ena[] = clken;
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult6.aclr[] = aclr;
	mac_mult6.clk[] = clock;
	mac_mult6.dataa[17..0] = w1w[53..36];
	mac_mult6.datab[17..0] = w2w[35..18];
	mac_mult6.ena[] = clken;
	mac_mult6.signa = B"0";
	mac_mult6.signb = B"0";
	mac_mult7.aclr[] = aclr;
	mac_mult7.clk[] = clock;
	mac_mult7.dataa[17..0] = w1w[17..0];
	mac_mult7.datab[17..0] = w2w[17..0];
	mac_mult7.ena[] = clken;
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"0";
	mac_mult8.aclr[] = aclr;
	mac_mult8.clk[] = clock;
	mac_mult8.dataa[17..0] = w1w[53..36];
	mac_mult8.datab[17..0] = w2w[17..0];
	mac_mult8.ena[] = clken;
	mac_mult8.signa = B"0";
	mac_mult8.signb = B"0";
	mac_mult9.aclr[] = aclr;
	mac_mult9.clk[] = clock;
	mac_mult9.dataa[17..0] = w1w[53..36];
	mac_mult9.datab[17..0] = w2w[53..36];
	mac_mult9.ena[] = clken;
	mac_mult9.signa = B"0";
	mac_mult9.signb = B"0";
	mac_out10.aclr[] = aclr;
	mac_out10.clk[] = clock;
	mac_out10.dataa[] = mac_mult9.dataout[];
	mac_out10.ena[] = clken;
	mac_out10.signa = B"0";
	mac_out10.signb = B"0";
	mac_out11.aclr[] = aclr;
	mac_out11.clk[] = clock;
	mac_out11.dataa[] = mac_mult1.dataout[];
	mac_out11.datab[] = mac_mult3.dataout[];
	mac_out11.datac[] = mac_mult5.dataout[];
	mac_out11.datad[] = mac_mult7.dataout[];
	mac_out11.ena[] = clken;
	mac_out11.signa = B"0";
	mac_out11.signb = B"0";
	mac_out12.aclr[] = aclr;
	mac_out12.clk[] = clock;
	mac_out12.dataa[] = mac_mult2.dataout[];
	mac_out12.datab[] = mac_mult4.dataout[];
	mac_out12.datac[] = mac_mult6.dataout[];
	mac_out12.datad[] = mac_mult8.dataout[];
	mac_out12.ena[] = clken;
	mac_out12.signa = B"0";
	mac_out12.signb = B"0";
	aclr = GND;
	clken = VCC;
	clock = GND;
	result[105..0] = add13_result[105..0];
	w1w[] = ( B"0", dataa[]);
	w2w[] = ( B"0", datab[]);
END;
--VALID FILE
